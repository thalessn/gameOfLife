{"version":3,"sources":["components/Header/styles.ts","components/Header/index.tsx","components/Footer/styles.ts","context/game.tsx","components/Footer/index.tsx","components/ItemBoard/styles.ts","components/ItemBoard/index.tsx","components/Board/styles.ts","utils/index.ts","components/Board/index.tsx","pages/Home/styles.ts","pages/Home/index.tsx","styles/global.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","header","Header","footer","buttonTypeVariations","start","css","stop","clean","random","Button","button","props","design","GameContext","createContext","GameProvider","children","useState","isStarted","setStarted","isClean","setClean","isFilled","setFilled","Provider","value","useGame","context","useContext","Error","Footer","onClick","div","isPaint","ItemBoard","handleOnClick","Grid","width","height","numberOfColumns","sizeItemBoard","numberOfRows","create2DArray","numberRows","numberColumns","Array","fill","map","row","index","createRandom2DArray","grid","indexRow","indexColumn","Math","floor","Board","setGrid","countNeighbors","useCallback","sum","indexRowNeighbor","indexColumnNeighbor","runGame","newGrid","JSON","parse","stringify","i","j","numberOfNeighbors","isDead","useEffect","intervalId","setInterval","clearInterval","handleCellGridClick","copyGrid","column","Home","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98fd6d15.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.header`\n  height: 66px;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  margin-top: 18px;\n\n  h1 {\n    padding: 8px;\n    color: #FFF;\n    font-weight: lighter;\n    font-family: 'Alfa Slab One', cursive;\n    font-size: 56px;\n    letter-spacing: 10px;\n  }\n`;\n","import React from \"react\";\nimport { Container } from \"./styles\";\n\nconst Header: React.FC = () => {\n  return <Container>\n    <h1>Jogo da Vida</h1>\n  </Container>;\n};\n\nexport default Header;\n","import styled, { css } from \"styled-components\";\n\ninterface IButtonProps {\n  design?: \"start\" | \"stop\" | \"clean\" | \"random\"\n}\n\nexport const Container = styled.footer`\n  margin: 15px 15px;\n  height: 56px;\n  display: flex;\n  justify-content: center;\n`;\n\n\nconst buttonTypeVariations = {\n  start: css`\n    background-color: #2ea44f;\n  `,\n  stop: css`\n    background-color: #ee4035;\n  `,\n  clean: css`\n    background-color:  #708090;\n  `,\n  random: css`\n  background-color:  #0077b6;\n`,\n}\n\nexport const Button = styled.button<IButtonProps>`\n  align-items: center;\n  background-clip: padding-box;\n  border: 1px solid transparent;\n  border-radius: .25rem;\n  box-shadow: rgba(0, 0, 0, 0.02) 0 1px 3px 0;\n  box-sizing: border-box;\n  color: #fff;\n  cursor: pointer;\n  display: inline-flex;\n  font-family: system-ui,-apple-system,system-ui,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n  font-size: 18px;\n  font-weight: 600;\n  justify-content: center;\n  line-height: 1.25;\n  margin: 0;\n  min-height: 3rem;\n  padding: calc(.875rem - 1px) calc(1.5rem - 1px);\n  position: relative;\n  text-decoration: none;\n  transition: all 250ms;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  vertical-align: baseline;\n  width: 180px;\n\n  ${props => buttonTypeVariations[props.design || \"start\"]}\n\n  &:hover {\n    background-color: #fb8332;\n    box-shadow: rgba(0, 0, 0, 0.1) 0 4px 12px;\n  }\n\n  &:hover {\n    transform: translateY(-1px);\n  }\n`;\n","import React, { createContext, useContext, useState } from \"react\";\n\ninterface IGameContext {\n    isStarted: boolean;\n    setStarted(play: boolean): void;\n    isClean: boolean;\n    setClean(clean: boolean): void;\n    isFilled: boolean;\n    setFilled(filled: boolean): void;\n}\n\nconst GameContext = createContext<IGameContext>({} as IGameContext);\n\nexport const GameProvider: React.FC = ({ children }) => {\n    const [isStarted, setStarted] = useState(false);\n    const [isClean, setClean] = useState(false);\n    const [isFilled, setFilled] = useState(false);\n\n    return (\n        <GameContext.Provider value={{ isStarted, setStarted, isClean, setClean, isFilled, setFilled }}>\n            {children}\n        </GameContext.Provider>\n    );\n}\n\nexport function useGame(): IGameContext {\n    const context = useContext(GameContext);\n\n    if (!context) {\n        throw new Error(\"useAuth ust be used within an GameProvider\");\n    }\n\n    return context;\n}\n\n\n\n","import React from \"react\";\nimport { Container, Button } from \"./styles\";\nimport { useGame } from \"../../context/game\";\n\nconst Footer: React.FC = () => {\n  const {isStarted, setStarted, setClean, setFilled} = useGame();\n  const handleStartOrStop = () => {\n    if (isStarted)  \n        setStarted(!isStarted);\n    else\n      setStarted(!isStarted);\n  }\n\n  const handleClean = () => {\n    setClean(true);\n    if (isStarted) {  \n        setStarted(!isStarted);\n    }\n  }\n\n  const handleFill = () => {\n    setFilled(true);\n  }\n\n  return (\n    <Container>\n      <Button\n        onClick={handleStartOrStop}\n        design={isStarted ? \"stop\" : \"start\"}\n      >{isStarted ? \"Parar\" : \"Iniciar\"}</Button>\n      <Button\n        design={\"clean\"}\n        onClick={handleClean}\n      >\n        Limpar Grid\n      </Button>\n      <Button\n        design={\"random\"}\n        onClick={handleFill}\n      >\n        Aleat√≥rio\n      </Button>\n    </Container>\n  );\n};\n\nexport default Footer;\n","import styled, { css } from \"styled-components\";\n\ninterface IContainerProps {\n  isPaint: number;\n}\n\nexport const Container = styled.div<IContainerProps>`\n  width: 25px;\n  height: 25px;\n  border: solid 1px black;\n  margin: 0.5;\n\n  ${(props) =>\n    props.isPaint &&\n    css`\n      background-color: #ffd942;\n    `}\n`;\n","import React from \"react\";\nimport { Container } from \"./styles\";\n\ninterface IItemBoardProps {\n  handleOnClick: () => void;\n  isPaint: number;\n}\n\nconst ItemBoard: React.FC<IItemBoardProps> = ({ handleOnClick, isPaint }) => {\n  return <Container onClick={() => handleOnClick()} isPaint={isPaint} />;\n};\n\nexport default ItemBoard;\n","import styled from \"styled-components\";\n\ninterface IBoardProps {\n    width: number;\n    height: number;\n    numberOfRows: number;\n    numberOfColumns: number;\n    sizeItemBoard: number;\n}\n\nexport const Grid = styled.div<IBoardProps>`\n    display: grid;\n    background-color: white;\n    width: ${props => props.width}px;\n    height: ${props => props.height}px;\n    grid-template-columns: repeat(${props => props.numberOfColumns}, ${props => props.sizeItemBoard}px);\n    grid-template-rows: repeat(${props => props.numberOfRows}, ${props => props.sizeItemBoard}px);\n`;\n\nexport const Container = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n`; ","\nexport const create2DArray = (numberRows: number, numberColumns: number) => {\n    return new Array(numberRows).fill(0).map((row, index) => {\n        return new Array(numberColumns).fill(0);\n    });\n}\n\nconst generateRandomZeroOrOne = () => {\n    return (Math.floor(Math.random() * 4) === 1) ? 1 : 0;\n}\n\nexport const createRandom2DArray = (numberRows: number, numberColumns: number) => {\n    let grid = create2DArray(numberRows, numberColumns);\n    for(let indexRow = 0; indexRow < numberRows; indexRow++){\n        for(let indexColumn = 0; indexColumn < numberColumns; indexColumn++){\n            grid[indexRow][indexColumn] = generateRandomZeroOrOne();\n        }\n    }\n    return grid;\n}\n\nexport const copyGrid = (grid: Array<any>) => {\n    return JSON.parse(JSON.stringify(grid));\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport ItemBoard from \"../ItemBoard\";\nimport { Container, Grid } from \"./styles\";\nimport { create2DArray, createRandom2DArray, copyGrid } from \"../../utils\";\nimport { useGame } from \"../../context/game\";\n\nconst Board: React.FC = ({ children }) => {\n  const width = 1400;\n  const height = 600;\n  const sizeItemBoard = 25;\n  const numberOfRows = height / sizeItemBoard;\n  const numberOfColumns = width / sizeItemBoard;\n  const [grid, setGrid] = useState(() => {\n    return createRandom2DArray(numberOfRows, numberOfColumns);\n  });\n\n  const { isStarted, isClean, setClean, isFilled, setFilled } = useGame();\n\n  const countNeighbors = useCallback((\n    grid: Array<any>,\n    indexRow: number,\n    indexColumn: number\n  ) => {\n    let sum = 0;\n    for (let indexRowNeighbor = -1; indexRowNeighbor < 2;\n          indexRowNeighbor++) {\n      for (let indexColumnNeighbor = -1; indexColumnNeighbor < 2;\n          indexColumnNeighbor++) {\n        if (indexRow + indexRowNeighbor >= 0 &&\n          indexRow + indexRowNeighbor < numberOfRows &&\n          indexColumn + indexColumnNeighbor >= 0 &&\n          indexColumn + indexColumnNeighbor < numberOfColumns\n        ) {\n          sum += grid[indexRow + indexRowNeighbor][\n              indexColumn + indexColumnNeighbor\n          ];\n        }\n      }\n    }\n    sum -= grid[indexRow][indexColumn];\n    return sum;\n  }, [numberOfRows, numberOfColumns]);\n\n  const runGame = useCallback(() => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    for (let i = 0; i < numberOfRows; i++) {\n      for (let j = 0; j < numberOfColumns; j++) {\n        let numberOfNeighbors = countNeighbors(grid, i, j);\n        let isDead = grid[i][j] ? 0 : 1;\n\n        if (numberOfNeighbors < 2 || numberOfNeighbors > 3) {\n          newGrid[i][j] = 0;\n        } else if (numberOfNeighbors === 3 && isDead) {\n          newGrid[i][j] = 1;\n        }\n      }\n    }\n    setGrid(newGrid);\n  }, [grid, countNeighbors, numberOfRows, numberOfColumns]);\n\n  useEffect(() => {\n    if (isFilled) {\n      const newGrid = createRandom2DArray(numberOfRows, numberOfColumns);\n      setGrid(newGrid);\n      setFilled(!isFilled);\n    }\n  }, [isFilled, setFilled, numberOfRows, numberOfColumns]);\n\n  useEffect(() => {\n    if (isClean) {\n      const newGrid = create2DArray(numberOfRows, numberOfColumns)\n      setGrid(newGrid);\n      setClean(!isClean);\n    }\n  }, [isClean, setClean, numberOfRows, numberOfColumns])\n\n  useEffect(() => {\n    if (isStarted) {\n      const intervalId = setInterval(runGame, 100)\n      return () => clearInterval(intervalId);\n    }\n  }, [isStarted, runGame])\n\n\n\n\n  const handleCellGridClick = (indexRow: number, indexColumn: number) => {\n    const newGrid = copyGrid(grid);\n    newGrid[indexRow][indexColumn] = grid[indexRow][indexColumn] ? 0 : 1;\n    setGrid(newGrid);\n  };\n\n  return (\n    <>\n      <Container>\n        <Grid\n          width={width}\n          height={height}\n          numberOfRows={numberOfRows}\n          numberOfColumns={numberOfColumns}\n          sizeItemBoard={sizeItemBoard}\n        >\n          {grid.map((row: Array<any>, indexRow: number) =>\n            row.map((column: Array<any>, indexColumn: number) => (\n              <ItemBoard\n                key={`${indexRow}-${indexColumn}`}\n                handleOnClick={() => handleCellGridClick(indexRow, indexColumn)}\n                isPaint={grid[indexRow][indexColumn] ? 1 : 0}\n              />\n            ))\n          )}\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default Board;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: auto;\n    height: 100vh;\n    background: #2193b0; \n    background: -webkit-linear-gradient(to bottom, #2193b0, #6dd5ed);\n    background: linear-gradient(to bottom, #2193b0, #6dd5ed);\n\n`;","import Header from \"../../components/Header\";\nimport Footer from \"../../components/Footer\";\nimport Board from \"../../components/Board\";\nimport { Container } from \"./styles\";\n\n\nconst Home: React.FC = () => {\n  return (\n    <Container>\n      <Header />\n      <Board />\n      <Footer />\n    </Container>\n  );\n};\n\nexport default Home;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n`;","import React from \"react\";\nimport Home from \"./pages/Home\";\nimport GlobalStyle from \"./styles/global\";\nimport { GameProvider } from \"./context/game\"\n\nconst App: React.FC = () => (\n  <>\n    <GlobalStyle />\n    <GameProvider>\n      <Home />\n    </GameProvider>\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}